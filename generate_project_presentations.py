#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ูููุฏ ุนุฑูุถ PowerPoint ูููุดุงุฑูุน
ูููู ุจุฅูุดุงุก ููู PowerPoint ุงุญุชุฑุงูู ููู ูุดุฑูุน/ุฅูุฌุงุฒ ุจูุงุกู ุนูู ุจูุงูุงุช plan-data.json
"""

import json
import os
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN, MSO_ANCHOR
from pptx.dml.color import RGBColor
from datetime import datetime

# ุฃููุงู ุจูุฏูุฉ ุฃุจูุธุจู
ADM_BLUE = RGBColor(0, 102, 204)  # #0066cc
ADM_GREEN = RGBColor(0, 166, 81)  # #00a651
ADM_GOLD = RGBColor(255, 215, 0)  # #ffd700
DARK_GRAY = RGBColor(44, 62, 80)  # #2c3e50
LIGHT_GRAY = RGBColor(127, 140, 141)  # #7f8c8d

def load_project_data():
    """ุชุญููู ุจูุงูุงุช ุงููุดุงุฑูุน ูู plan-data.json"""
    with open('plan-data.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def create_title_slide(prs, project):
    """ุฅูุดุงุก ุตูุญุฉ ุงูุนููุงู"""
    slide = prs.slides.add_slide(prs.slide_layouts[6])  # Blank layout
    
    # ุฎูููุฉ ุฒุฑูุงุก
    background = slide.background
    fill = background.fill
    fill.solid()
    fill.fore_color.rgb = ADM_BLUE
    
    # ุฅุถุงูุฉ ุงูุฃููููุฉ ูุงูุนููุงู
    title_box = slide.shapes.add_textbox(Inches(1), Inches(2), Inches(8), Inches(1.5))
    title_frame = title_box.text_frame
    title_frame.vertical_anchor = MSO_ANCHOR.MIDDLE
    
    p = title_frame.paragraphs[0]
    p.text = f"{project.get('icon', '๐ฏ')} {project['title']}"
    p.font.size = Pt(44)
    p.font.bold = True
    p.font.color.rgb = RGBColor(255, 255, 255)
    p.alignment = PP_ALIGN.CENTER
    
    # ุงููุตู
    desc_box = slide.shapes.add_textbox(Inches(1), Inches(3.8), Inches(8), Inches(1.5))
    desc_frame = desc_box.text_frame
    desc_frame.word_wrap = True
    
    p = desc_frame.paragraphs[0]
    p.text = project.get('description', '')
    p.font.size = Pt(18)
    p.font.color.rgb = RGBColor(255, 255, 255)
    p.alignment = PP_ALIGN.CENTER
    
    # ูุนูููุงุช ุงููุคูู ูุงูุชุงุฑูุฎ
    footer_box = slide.shapes.add_textbox(Inches(1), Inches(6.5), Inches(8), Inches(0.8))
    footer_frame = footer_box.text_frame
    
    p = footer_frame.paragraphs[0]
    p.text = "ุฏ. ุนูู ุนุจุฏุงูุนุงู | ุฅุฏุงุฑุฉ ุงูุฑูู ุจุงูุญููุงู | ุจูุฏูุฉ ูุฏููุฉ ุฃุจูุธุจู"
    p.font.size = Pt(14)
    p.font.color.rgb = RGBColor(255, 255, 255)
    p.alignment = PP_ALIGN.CENTER
    
    # ุงูุชุงุฑูุฎ
    date_box = slide.shapes.add_textbox(Inches(1), Inches(7), Inches(8), Inches(0.5))
    date_frame = date_box.text_frame
    
    p = date_frame.paragraphs[0]
    p.text = datetime.now().strftime("%Y/%m/%d")
    p.font.size = Pt(12)
    p.font.color.rgb = RGBColor(255, 255, 255)
    p.alignment = PP_ALIGN.CENTER

def add_section_slide(prs, title, content_list, icon="๐"):
    """ุฅุถุงูุฉ ุดุฑูุญุฉ ูุณู ูุน ููุงุท"""
    slide = prs.slides.add_slide(prs.slide_layouts[6])
    
    # ุงูุนููุงู
    title_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.5), Inches(9), Inches(0.8))
    title_frame = title_box.text_frame
    
    p = title_frame.paragraphs[0]
    p.text = f"{icon} {title}"
    p.font.size = Pt(32)
    p.font.bold = True
    p.font.color.rgb = ADM_BLUE
    p.alignment = PP_ALIGN.RIGHT
    
    # ุฎุท ูุงุตู
    line = slide.shapes.add_shape(
        1,  # Line
        Inches(0.5), Inches(1.4), Inches(9), Inches(0)
    )
    line.line.color.rgb = ADM_GREEN
    line.line.width = Pt(3)
    
    # ุงููุญุชูู
    content_box = slide.shapes.add_textbox(Inches(0.8), Inches(1.8), Inches(8.4), Inches(5))
    text_frame = content_box.text_frame
    text_frame.word_wrap = True
    
    for item in content_list:
        p = text_frame.add_paragraph() if text_frame.paragraphs[0].text else text_frame.paragraphs[0]
        p.text = f"โข {item}"
        p.font.size = Pt(18)
        p.font.color.rgb = DARK_GRAY
        p.level = 0
        p.space_before = Pt(6)
        p.alignment = PP_ALIGN.RIGHT

def add_two_column_slide(prs, title, left_title, left_content, right_title, right_content):
    """ุฅุถุงูุฉ ุดุฑูุญุฉ ุจุนููุฏูู"""
    slide = prs.slides.add_slide(prs.slide_layouts[6])
    
    # ุงูุนููุงู
    title_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.5), Inches(9), Inches(0.8))
    title_frame = title_box.text_frame
    
    p = title_frame.paragraphs[0]
    p.text = title
    p.font.size = Pt(32)
    p.font.bold = True
    p.font.color.rgb = ADM_BLUE
    p.alignment = PP_ALIGN.CENTER
    
    # ุงูุนููุฏ ุงูุฃููู
    right_box = slide.shapes.add_textbox(Inches(5.2), Inches(1.5), Inches(4.3), Inches(5.5))
    right_frame = right_box.text_frame
    right_frame.word_wrap = True
    
    p = right_frame.paragraphs[0]
    p.text = right_title
    p.font.size = Pt(20)
    p.font.bold = True
    p.font.color.rgb = ADM_GREEN
    p.alignment = PP_ALIGN.RIGHT
    
    for item in right_content:
        p = right_frame.add_paragraph()
        p.text = f"โข {item}"
        p.font.size = Pt(16)
        p.font.color.rgb = DARK_GRAY
        p.space_before = Pt(4)
        p.alignment = PP_ALIGN.RIGHT
    
    # ุงูุนููุฏ ุงูุฃูุณุฑ
    left_box = slide.shapes.add_textbox(Inches(0.5), Inches(1.5), Inches(4.3), Inches(5.5))
    left_frame = left_box.text_frame
    left_frame.word_wrap = True
    
    p = left_frame.paragraphs[0]
    p.text = left_title
    p.font.size = Pt(20)
    p.font.bold = True
    p.font.color.rgb = ADM_GREEN
    p.alignment = PP_ALIGN.RIGHT
    
    for item in left_content:
        p = left_frame.add_paragraph()
        p.text = f"โข {item}"
        p.font.size = Pt(16)
        p.font.color.rgb = DARK_GRAY
        p.space_before = Pt(4)
        p.alignment = PP_ALIGN.RIGHT

def add_closing_slide(prs):
    """ุฅุถุงูุฉ ุดุฑูุญุฉ ุฎุชุงููุฉ"""
    slide = prs.slides.add_slide(prs.slide_layouts[6])
    
    # ุฎูููุฉ ุฎุถุฑุงุก
    background = slide.background
    fill = background.fill
    fill.solid()
    fill.fore_color.rgb = ADM_GREEN
    
    # ุฑุณุงูุฉ ุงูุดูุฑ
    thanks_box = slide.shapes.add_textbox(Inches(1), Inches(2.5), Inches(8), Inches(1))
    thanks_frame = thanks_box.text_frame
    
    p = thanks_frame.paragraphs[0]
    p.text = "ุดูุฑุงู ูุงูุชูุงููู"
    p.font.size = Pt(44)
    p.font.bold = True
    p.font.color.rgb = RGBColor(255, 255, 255)
    p.alignment = PP_ALIGN.CENTER
    
    # ูุนูููุงุช ุงูุชูุงุตู
    contact_box = slide.shapes.add_textbox(Inches(1), Inches(4), Inches(8), Inches(2))
    contact_frame = contact_box.text_frame
    
    contact_info = [
        "ุฏ. ุนูู ุนุจุฏุงูุนุงู - ุทุจูุจ ุจูุทุฑู",
        "ุฅุฏุงุฑุฉ ุงูุฑูู ุจุงูุญููุงู",
        "ุจูุฏูุฉ ูุฏููุฉ ุฃุจูุธุจู",
        "๐ง Ali.Abdelaal@adm.gov.ae",
        "๐ฑ 0581187777"
    ]
    
    for i, info in enumerate(contact_info):
        p = contact_frame.add_paragraph() if i > 0 else contact_frame.paragraphs[0]
        p.text = info
        p.font.size = Pt(18)
        p.font.color.rgb = RGBColor(255, 255, 255)
        p.alignment = PP_ALIGN.CENTER
        p.space_before = Pt(6)

def create_project_presentation(project, data):
    """ุฅูุดุงุก ุนุฑุถ ุชูุฏููู ูุงูู ูููุดุฑูุน"""
    prs = Presentation()
    prs.slide_width = Inches(10)
    prs.slide_height = Inches(7.5)
    
    # 1. ุตูุญุฉ ุงูุนููุงู
    create_title_slide(prs, project)
    
    # 2. ูุธุฑุฉ ุนุงูุฉ ูุฃูุฏุงู ุงููุดุฑูุน
    overview_content = [
        f"ุงููุฆุฉ: {project.get('category', 'ูุดุฑูุน')}",
        f"ุงููุฏู: {project.get('description', '')}",
    ]
    if 'goals' in project:
        overview_content.append(f"ุงูููุงู: {project['goals']}")
    
    add_section_slide(prs, "ูุธุฑุฉ ุนุงูุฉ ูุฃูุฏุงู ุงููุดุฑูุน", overview_content, "๐ฏ")
    
    # 3. ุงูุชูููุงุช ุงููุณุชุฎุฏูุฉ
    if 'technologies' in project and project['technologies']:
        tech_list = project['technologies']
        add_section_slide(prs, "ุงูุชูููุงุช ูุงูุฃุฏูุงุช ุงููุณุชุฎุฏูุฉ", tech_list, "๐ป")
    
    # 4. ุงูููุงุฆุฏ ูุงููููุฉ ุงููุถุงูุฉ
    if 'benefits' in project and project['benefits']:
        benefits_list = project['benefits']
        # ุชูุณูู ุงูููุงุฆุฏ ุฅูู ุดุฑุงุฆุญ ุฅุฐุง ูุงูุช ูุซูุฑุฉ
        chunk_size = 6
        for i in range(0, len(benefits_list), chunk_size):
            chunk = benefits_list[i:i+chunk_size]
            title = "ุงูููุงุฆุฏ ูุงููููุฉ ุงููุถุงูุฉ" if i == 0 else f"ุงูููุงุฆุฏ ูุงููููุฉ ุงููุถุงูุฉ (ุชุงุจุน {i//chunk_size + 1})"
            add_section_slide(prs, title, chunk, "๐")
    
    # 5. ุงูุฑุจุท ูุน ุฅุฏุงุฑุฉ ุงูุฑูู ุจุงูุญููุงู
    animal_welfare_context = [
        "ูุณุงูู ูู ุชุญููู ุฑุคูุฉ ุจูุฏูุฉ ุฃุจูุธุจู ููุชููุฒ ุงููุคุณุณู",
        "ูุนุฒุฒ ููุงุกุฉ ุงูุนูู ูู ุฅุฏุงุฑุฉ ุงูุฑูู ุจุงูุญููุงู",
        "ูุฏุนู ุงูุฃูุฏุงู ุงูุงุณุชุฑุงุชูุฌูุฉ ููุฅุฏุงุฑุฉ",
        "ูููุฑ ุญููู ุชูููุฉ ูุชูุฏูุฉ ููุนูููุงุช ุงูููููุฉ",
        "ูุญุณู ุฌูุฏุฉ ุงูุฎุฏูุงุช ุงูููุฏูุฉ ูููุฌุชูุน",
        "ูุณุงูู ูู ุฑูุน ูุณุชูู ุงูุฃุฏุงุก ุงููุคุณุณู"
    ]
    add_section_slide(prs, "ุงูุฑุจุท ูุน ุฅุฏุงุฑุฉ ุงูุฑูู ุจุงูุญููุงู", animal_welfare_context, "๐พ")
    
    # 6. ุงูุฃูุฏุงู ุงูุชุดุบูููุฉ ูุงูุงุณุชุฑุงุชูุฌูุฉ
    operational_goals = [
        "ุชุญุณูู ุงูููุงุกุฉ ุงูุชุดุบูููุฉ ููุฅุฏุงุฑุฉ",
        "ุชูููู ุงูููุช ูุงูุฌูุฏ ุงููุจุฐูู ูู ุงูุนูููุงุช",
        "ุฑูุน ูุณุชูู ุงูุฏูุฉ ูุชูููู ุงูุฃุฎุทุงุก",
        "ุชุนุฒูุฒ ุงูุชูุงุตู ูุงูุชุนุงูู ุจูู ุงููุฑู"
    ]
    
    strategic_goals = [
        "ุชุญููู ุงูุชุญูู ุงูุฑููู ุงูุดุงูู",
        "ุชุทุจูู ูุนุงููุฑ ุงูุชููุฒ ุงูุนุงูููุฉ",
        "ุฏุนู ุฑุคูุฉ ุฃุจูุธุจู 2030",
        "ุชุนุฒูุฒ ููุงูุฉ ุจูุฏูุฉ ุฃุจูุธุจู ุงูุฑูุงุฏูุฉ"
    ]
    
    add_two_column_slide(prs, "ุงูุฃูุฏุงู ุงูุชุดุบูููุฉ ูุงูุงุณุชุฑุงุชูุฌูุฉ", 
                         "ุงูุฃูุฏุงู ุงูุงุณุชุฑุงุชูุฌูุฉ ๐ฏ", strategic_goals,
                         "ุงูุฃูุฏุงู ุงูุชุดุบูููุฉ โ๏ธ", operational_goals)
    
    # 7. ุงูุจูุงูุงุช ุงูุฏุงุนูุฉ ูุงูุฅุญุตุงุฆูุงุช
    if 'benefits' in project and project['benefits']:
        # ุงุณุชุฎุฑุงุฌ ุงูุฃุฑูุงู ูุงูุฅุญุตุงุฆูุงุช ูู ุงูููุงุฆุฏ
        stats = []
        for benefit in project['benefits']:
            if any(char.isdigit() for char in benefit):
                stats.append(benefit)
        
        if stats:
            add_section_slide(prs, "ุงูุจูุงูุงุช ุงูุฏุงุนูุฉ ูุงูุฅุญุตุงุฆูุงุช", stats, "๐")
    
    # 8. ุงูุฃุฏูุฉ ูุงููุซุงุฆู ุงููุณุงูุฏุฉ
    evidence = [
        f"ููู ุงููุดุฑูุน: {project.get('link', 'ุบูุฑ ูุชููุฑ')}",
        "ุงูุชูุซูู ุงููุงูู ูุชููุฑ ูู ุงูููุตุฉ ุงูุฅููุชุฑูููุฉ",
        "ุนุฑูุถ ุชูุงุนููุฉ HTML ูุชุงุญุฉ ูููุฑุงุฌุนุฉ",
        "ุจูุงูุงุช ุชูุตูููุฉ ูู plan-data.json",
        "ุชูุงุฑูุฑ ุชุญููููุฉ ูู ุงููุฌูุฏุงุช ุงูุชูุงุนููุฉ",
        "ูุนุงููุฑ ุฏูููุฉ ููุซูุฉ ูู best-practices-summary.md"
    ]
    add_section_slide(prs, "ุงูุฃุฏูุฉ ูุงููุซุงุฆู ุงููุณุงูุฏุฉ", evidence, "๐")
    
    # 9. ุงูุชุฃุซูุฑ ูุงููุชุงุฆุฌ ุงููุชููุนุฉ
    impact = [
        "ุชุญุณูู ูุณุชูู ุงูุฎุฏูุงุช ุงูููุฏูุฉ",
        "ุฒูุงุฏุฉ ุฑุถุง ุงููุณุชููุฏูู ุงูุฏุงุฎูููู ูุงูุฎุงุฑุฌููู",
        "ุชูููุฑ ุงูููุงุฑุฏ ูุงูููุช ูุงูุฌูุฏ",
        "ุชุนุฒูุฒ ุตูุฑุฉ ุงูุจูุฏูุฉ ููุคุณุณุฉ ุฑุงุฆุฏุฉ",
        "ุงููุณุงููุฉ ูู ุชุญููู ุฃูุฏุงู ุงูุชูููุฉ ุงููุณุชุฏุงูุฉ",
        "ุฏุนู ุงูุชุญูู ุงูุฑููู ุงููุทูู"
    ]
    add_section_slide(prs, "ุงูุชุฃุซูุฑ ูุงููุชุงุฆุฌ ุงููุชููุนุฉ", impact, "๐ฏ")
    
    # 10. ุตูุญุฉ ุฎุชุงููุฉ
    add_closing_slide(prs)
    
    return prs

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    print("๐ ุจุฏุก ุฅูุดุงุก ูููุงุช PowerPoint ูููุดุงุฑูุน...")
    
    # ุชุญููู ุงูุจูุงูุงุช
    data = load_project_data()
    
    # ุฅูุดุงุก ูุฌูุฏ ููุนุฑูุถ ุงูุชูุฏูููุฉ
    output_dir = "PowerPoint_Presentations"
    os.makedirs(output_dir, exist_ok=True)
    
    # ุฌูุน ูู ุงููุดุงุฑูุน ูุงูุฅูุฌุงุฒุงุช
    all_items = []
    
    # ุงููุดุงุฑูุน ุงูุฑุฆูุณูุฉ
    if 'projects' in data:
        all_items.extend(data['projects'])
    
    # ููู ุงูุฅูุฌุงุฒุงุช
    if 'portfolio' in data:
        all_items.extend(data['portfolio'])
    
    # ุฅูุดุงุก ุนุฑุถ ุชูุฏููู ููู ูุดุฑูุน
    created_count = 0
    for item in all_items:
        try:
            # ุชุฎุทู ุงูุนูุงุตุฑ ุจุฏูู ุนููุงู ุฃู ูุน ุฑูุงุจุท ูุงุฑุบุฉ
            if not item.get('title') or item.get('link') == '#':
                continue
            
            print(f"\n๐ ุฅูุดุงุก ุนุฑุถ ุชูุฏููู: {item['title']}")
            
            prs = create_project_presentation(item, data)
            
            # ุญูุธ ุงูููู
            safe_title = item['title'].replace('/', '-').replace('\\', '-')
            filename = f"{output_dir}/{safe_title}.pptx"
            prs.save(filename)
            
            print(f"โ ุชู ุญูุธ ุงูููู: {filename}")
            created_count += 1
            
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุนุฑุถ ุชูุฏููู ูู {item.get('title', 'Unknown')}: {str(e)}")
    
    print(f"\nโจ ุชู ุงูุงูุชูุงุก! ุชู ุฅูุดุงุก {created_count} ููู PowerPoint ูู ุงููุฌูุฏ {output_dir}")
    print(f"๐ ุงููุณุงุฑ ุงููุงูู: {os.path.abspath(output_dir)}")

if __name__ == "__main__":
    main()
